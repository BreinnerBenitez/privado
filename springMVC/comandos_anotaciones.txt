en el archivo aplicationcontext.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd "
> 
<context:component-scan base-package="es.breinner.benitez"></context:component-scan> // me carga el //excaneo con las anotaciones del archivo xml 



</beans>

-------------------------------------------------------------------------


@autowired = para metodos atributos y constructores  que me generan  el  contexto.getbean
@Qualifier= me indica que clase que implementa la interfaz es la llamada 
@Component= la calse que van a tener los Autorried y tambien la clase que implementa la interfaz para escaneo
@scope("") = para utilizar patron de diseño singleton y prototype
------------------------------------------------------------------------

@postConstruct InitializingBean , DisposableBean interfaces que remplazan estas anotaciones
@preDestroy
tener en cuenta los metedos init (antes de la ejecucion) y metodos destroy(despues de la ejecucion)
---------------------------------------------------------------------------------------
con xml = ClassPathXmlApplicationContext contexto=new ClassPathXmlApplicationContext("applicationContext.xml");

con class= AnnotationConfigApplicationContext contexto = new AnnotationConfigApplicationContext (EmpleadosConfig.class);
para no utilizar el xml y mejor un .class  se utiliza las siguentes anotaciones
@Configuration
@ComponentScan("es.breinner.benitez")
public clase {
@bean
 metodo que trae la info 
 metodo que inyecta dependencia al constructor de la clase 
}

@PropertySource= permite especificar la ruta al archivo externo de propiedades 
@Value= permite inyectar el valor de las propiedades desde archivo externo
---------------------------------MODELO VISTA CONTROLADOR---------------------
@Controller = me indica con Spring cual sera mi controlador  clase controlador
@RequestMapping= el metodo que tiene esa etiqueta me indica cual sera mi jsp para la vista en la calse contr
@RequestParam = para remplazar el objeto httpServletRequest de servlet 

-----------------------------------------ANTOCAIONES DE HIRBENTE VALIDACION---------------------------

@NotNull = campo no vacio
@Size=(min=2,message="campo requerido ")
@Min(value=10,message ="no se permiten edades menores de 10")
@Max(value=100,message ="no se permiten edades mayores de 100")
@Email=verifica que el email tenga un arroba 
@InitBinder = espacios en blancos para que valide StringTrimmerEditor recortarespacios = new StringTrimmerEditor(true);


--------------------------------------------CREACION DE ANOTACIONES-----------------------


@Constraint(validatedBy=CPostalColombiaValidacion.class) // futura clase que tendra la logica de la validacion
@Target({ElementType.METHOD, ElementType.FIELD}) // destino de validacion metodos y campos
@Retention(RetentionPolicy.RUNTIME) // chequea la anotacion en tiempo de ejecucion
public @interface CPmadril {
// difinir el c  postal por defecto 
	
	public String value () default "28";
	
	
	// definir el mensaje de error 
	
	public String Message() default "el c postal debe comenzar por 28";
	
	
	// definir los grupos
	
	
	 Class<?>[] groups() default {};
	
	
	 // definir los payloads

	 
	 Class<? extends Payload>[] payload() default {};

}


------- LOGICA DE LA ANOTACION--------------




public class CPostalColombiaValidacion implements ConstraintValidator< CPmadril, String> {

	@Override
    public void initialize(CPmadril elcodigo) {
    
		prefijocolombia=elcodigo.value();
		
	}
	
	
	@Override
	public boolean isValid(String arg0, ConstraintValidatorContext arg1) {
		// TODO Auto-generated method stub
		
		
		boolean valcodigo;
		
		if(arg0 != null) {
			
			valcodigo=arg0.startsWith(prefijocolombia);
		}else {
			
		return 	valcodigo=true;
			
			
		}
	
		return valcodigo;
	}

	
	private String prefijocolombia;
	
}

-------------------------------------HIBERNATE ORM------------------------------------------

1) configurar proyecto hibernate 
2) anotaciones java para mapeo BBDD y tablas (ORM)


@Entity
@Table(name="clientes")
public class Clientes {
	


	public Clientes() {
	}

	
	public Clientes(String nombre, String apellido, String direccion) {
		this.nombre = nombre;
		this.apellido = apellido;
		this.direccion = direccion;
	}
	
	
	public int getId() {
		return id;
	}


	public void setId(int id) {
		this.id = id;
	}


	public String getNombre() {
		return nombre;
	}


	public void setNombre(String nombre) {
		this.nombre = nombre;
	}


	public String getApellido() {
		return apellido;
	}


	public void setApellido(String apellido) {
		this.apellido = apellido;
	}


	public String getDireccion() {
		return direccion;
	}


	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}

	@Override
	public String toString() {
		return "Clientes [id=" + id + ", nombre=" + nombre + ", apellido=" + apellido + ", direccion=" + direccion
				+ "]";
	}



	@Id
	@Column(name="id")
	private int id;
	
	@Column(name="nombre")
	private String nombre;
	
	@Column(name="apellido")
	private String apellido;
	
	@Column(name="direccion")
	private String direccion;
	
	
}


@GeneratedValue(strategy=GenerationType.IDENTITY) = campo principal en hibernate
--------------------------------------------------
// clase cliente
@OneToOne(cascade=CascadeType.ALL)
@JoinColumn(name="id_detalle")= llave foranea
private Detalles_cliente detallesCliente; =etiquetas  para generar relacion en java de dos tablas; 

//calse detallecliente
@OneToOne(mappedBy="detallesCliente",cascade=CascadeType.ALL)
@JoinColumn(name="id")
private Cliente elcliente;


@ManyToOne(cascade= {CascadeType.PERSIST,CascadeType.MERGE,CascadeType.DETACH,CascadeType.REFRESH,})
@JoinColumn(name="clienteid")
private Cliente cliente; = muchos a uno,   donde va el mappedBY es la entidad padre

